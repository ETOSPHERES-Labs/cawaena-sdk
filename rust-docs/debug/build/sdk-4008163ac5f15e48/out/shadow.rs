// Code automatically generated by `shadow-rs` (https://github.com/baoyachi/shadow-rs), do not edit.
// Author: https://www.github.com/baoyachi
// Generation time: 2025-02-24 09:04:27 +00:00



#[doc=r#"
The name of the Git branch that this project was built from.
This constant will be empty if the branch cannot be determined."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const BRANCH :&str = r#""#;

#[doc=r#"
Operating system and architecture on which the project was build.
The format of this variable is always `os-arch`,
where `os` is the operating system name as returned by [`std::env::consts::OS`],
and `arch` is the computer architecture as returned by [`std::env::consts::ARCH`]."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const BUILD_OS :&str = r#"linux-x86_64"#;

#[doc=r#"
The debug configuration with which the project was built.
Note that this is not the Rust channel, but either `debug` or `release`, depending on whether debug assertions were enabled in the build or not. "#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const BUILD_RUST_CHANNEL :&str = r#"debug"#;

#[doc=r#"
The [target](https://doc.rust-lang.org/rustc/targets/index.html) for this build.
This is possibly distinct from the host target during build, in which case this project build was created via cross-compilation."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const BUILD_TARGET :&str = r#"x86_64-unknown-linux-gnu"#;

#[doc=r#"
The architecture of the target for this build. This is the "architecture" part of the [`BUILD_TARGET`] constant."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const BUILD_TARGET_ARCH :&str = r#"x86_64"#;

#[doc=r#"
The project build time, formatted in modified ISO 8601 format (`YYYY-MM-DD HH-MM ±hh-mm` where hh-mm is the offset from UTC)."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const BUILD_TIME :&str = r#"2025-02-24 09:04:27 +00:00"#;

#[doc=r#"
The project build time, formatted according to [RFC 2822](https://datatracker.ietf.org/doc/html/rfc2822#section-3.3) (e.g. HTTP Headers)."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const BUILD_TIME_2822 :&str = r#"Mon, 24 Feb 2025 09:04:27 +0000"#;

#[doc=r#"
The project build time, formatted according to [RFC 3339 and ISO 8601](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6)."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const BUILD_TIME_3339 :&str = r#"2025-02-24T09:04:27.639249162Z"#;

#[doc=r#"
The cargo version which which the project was built, as output by `cargo --version`."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const CARGO_VERSION :&str = r#"cargo 1.83.0 (5ffbef321 2024-10-29)"#;

#[doc=r#"The time of the Git commit that this project was built from.
The time is formatted in modified ISO 8601 format (`YYYY-MM-DD HH-MM ±hh-mm` where hh-mm is the offset from UTC).

This constant will be empty if the last commit cannot be determined."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const COMMIT_DATE :&str = r#""#;

#[doc=r#"
The name of the Git branch that this project was built from.
The time is formatted according to [RFC 2822](https://datatracker.ietf.org/doc/html/rfc2822#section-3.3) (e.g. HTTP Headers).

This constant will be empty if the last commit cannot be determined."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const COMMIT_DATE_2822 :&str = r#""#;

#[doc=r#"
The name of the Git branch that this project was built from.
The time is formatted according to [RFC 3339 and ISO 8601](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6).

This constant will be empty if the last commit cannot be determined."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const COMMIT_DATE_3339 :&str = r#""#;

#[doc=r#"
The full commit hash of the Git commit that this project was built from.
An abbreviated, but not necessarily unique, version of this is [`SHORT_COMMIT`].

This constant will be empty if the last commit cannot be determined."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const COMMIT_HASH :&str = r#""#;

#[doc=r#"
Whether the Git working tree was clean at the time of project build (`true`), or not (`false`).

This constant will be `false` if the last commit cannot be determined."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const GIT_CLEAN :bool = true;

#[doc=r#"
The Git working tree status as a list of files with their status, similar to `git status`.
Each line of the list is preceded with `  * `, followed by the file name.
Files marked `(dirty)` have unstaged changes.
Files marked `(staged)` have staged changes.

This constant will be empty if the working tree status cannot be determined."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const GIT_STATUS_FILE :&str = r#""#;

#[doc=r#"
The name of the last Git tag on the branch that this project was built from.
As opposed to [`TAG`], this does not require the current commit to be tagged, just one of its parents.

This constant will be empty if the last tag cannot be determined."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const LAST_TAG :&str = r#""#;

#[doc=r#"
The project's description, as determined by the Cargo.toml manifest."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const PKG_DESCRIPTION :&str = r#"Frontend SDK for Android, iOS and Web. Includes wallet, kyc components"#;

#[doc=r#"
The project's full version string, as determined by the Cargo.toml manifest."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const PKG_VERSION :&str = r#"0.14.0"#;

#[doc=r#"
The project's semver major version, as determined by the Cargo.toml manifest."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const PKG_VERSION_MAJOR :&str = r#"0"#;

#[doc=r#"
The project's semver minor version, as determined by the Cargo.toml manifest."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const PKG_VERSION_MINOR :&str = r#"14"#;

#[doc=r#"
The project's semver patch version, as determined by the Cargo.toml manifest."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const PKG_VERSION_PATCH :&str = r#"0"#;

#[doc=r#"
The project's semver pre-release version, as determined by the Cargo.toml manifest."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const PKG_VERSION_PRE :&str = r#""#;

#[doc=r#"
The project name, as determined by the Cargo.toml manifest."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const PROJECT_NAME :&str = r#"sdk"#;

#[doc=r#"
The [Rustup toolchain](https://rust-lang.github.io/rustup/concepts/toolchains.html) with which the project was built.
Note that as per Rustup toolchain format, this variable may or may not contain host and date information,
but it will always contain [channel](https://rust-lang.github.io/rustup/concepts/channels.html) information (stable, beta or nightly)."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const RUST_CHANNEL :&str = r#"stable-x86_64-unknown-linux-gnu"#;

#[doc=r#"
Rust version with which the project was built.
The version always uses the canonical Rust version format,
and is therefore identical to the output of the build toolchain's `rustc --version`."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const RUST_VERSION :&str = r#"rustc 1.83.0 (90b35a623 2024-11-26)"#;

#[doc=r#"
The short hash of the Git commit that this project was built from.
Note that this will always truncate [`COMMIT_HASH`] to 8 characters if necessary.
Depending on the amount of commits in your project, this may not yield a unique Git identifier
([see here for more details on hash abbreviation](https://git-scm.com/docs/git-describe#_examples)).

This constant will be empty if the last commit cannot be determined."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const SHORT_COMMIT :&str = r#""#;

#[doc=r#"
The name of the Git tag that this project was built from.
Note that this will be empty if there is no tag for the HEAD at the time of build."#]
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const TAG :&str = r#""#;

/// A long version string describing the project.
/// The version string contains the package version, branch, commit hash, build time, and build environment on separate lines.
/// This constant is suitable for printing to the user.
#[allow(dead_code,missing_docs)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const VERSION:&str = shadow_rs::formatcp!(r#"
pkg_version:{}
branch:{}
commit_hash:{}
build_time:{}
build_env:{},{}"#,PKG_VERSION, BRANCH, SHORT_COMMIT, BUILD_TIME, RUST_VERSION, RUST_CHANNEL
);


#[deprecated = "Replaced with `CLAP_LONG_VERSION`"]
#[allow(dead_code,missing_docs)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const CLAP_VERSION:&str = shadow_rs::formatcp!(r#"{}
branch:{}
commit_hash:{}
build_time:{}
build_env:{},{}"#,PKG_VERSION, BRANCH, SHORT_COMMIT, BUILD_TIME, RUST_VERSION, RUST_CHANNEL
);


/// A long version string describing the project.
/// The version string contains the package version, branch, commit hash, build time, and build environment on separate lines.
/// This constant is intended to be used by clap or other CLI tools as a long version string.
#[allow(dead_code,missing_docs)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub const CLAP_LONG_VERSION:&str = shadow_rs::formatcp!(r#"{}
branch:{}
commit_hash:{}
build_time:{}
build_env:{},{}"#,PKG_VERSION, BRANCH, SHORT_COMMIT, BUILD_TIME, RUST_VERSION, RUST_CHANNEL
);


/// Prints all built-in `shadow-rs` build constants to standard output.
#[allow(dead_code)]
#[allow(clippy::all, clippy::pedantic, clippy::restriction, clippy::nursery)]
pub fn print_build_in() {
	println!("BRANCH:{BRANCH}\n");
	println!("BUILD_OS:{BUILD_OS}\n");
	println!("BUILD_RUST_CHANNEL:{BUILD_RUST_CHANNEL}\n");
	println!("BUILD_TARGET:{BUILD_TARGET}\n");
	println!("BUILD_TARGET_ARCH:{BUILD_TARGET_ARCH}\n");
	println!("BUILD_TIME:{BUILD_TIME}\n");
	println!("BUILD_TIME_2822:{BUILD_TIME_2822}\n");
	println!("BUILD_TIME_3339:{BUILD_TIME_3339}\n");
	println!("CARGO_VERSION:{CARGO_VERSION}\n");
	println!("COMMIT_DATE:{COMMIT_DATE}\n");
	println!("COMMIT_DATE_2822:{COMMIT_DATE_2822}\n");
	println!("COMMIT_DATE_3339:{COMMIT_DATE_3339}\n");
	println!("COMMIT_HASH:{COMMIT_HASH}\n");
	println!("GIT_CLEAN:{GIT_CLEAN}\n");
	println!("GIT_STATUS_FILE:{GIT_STATUS_FILE}\n");
	println!("LAST_TAG:{LAST_TAG}\n");
	println!("PKG_DESCRIPTION:{PKG_DESCRIPTION}\n");
	println!("PKG_VERSION:{PKG_VERSION}\n");
	println!("PKG_VERSION_MAJOR:{PKG_VERSION_MAJOR}\n");
	println!("PKG_VERSION_MINOR:{PKG_VERSION_MINOR}\n");
	println!("PKG_VERSION_PATCH:{PKG_VERSION_PATCH}\n");
	println!("PKG_VERSION_PRE:{PKG_VERSION_PRE}\n");
	println!("PROJECT_NAME:{PROJECT_NAME}\n");
	println!("RUST_CHANNEL:{RUST_CHANNEL}\n");
	println!("RUST_VERSION:{RUST_VERSION}\n");
	println!("SHORT_COMMIT:{SHORT_COMMIT}\n");
	println!("TAG:{TAG}\n");
	println!("VERSION:{VERSION}\n");
	println!("CLAP_LONG_VERSION:{CLAP_LONG_VERSION}\n");
}


